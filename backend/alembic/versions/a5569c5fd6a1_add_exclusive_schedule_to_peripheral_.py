"""add exclusive_schedule to peripheral_types and create schedules table

Revision ID: a5569c5fd6a1
Revises: 8c1fa99a83b7
Create Date: 2025-06-26 15:20:27.161146

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'a5569c5fd6a1'
down_revision: Union[str, Sequence[str], None] = '8c1fa99a83b7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop schedules table if it exists
    op.execute('DROP TABLE IF EXISTS schedules')
    # Add exclusive_schedule to peripheral_types if not exists
    with op.batch_alter_table('peripheral_types') as batch_op:
        try:
            batch_op.add_column(sa.Column('exclusive_schedule', sa.Boolean(), nullable=False))
        except Exception:
            pass
    # Create schedules table fresh
    op.create_table(
        'schedules',
        sa.Column('id', sa.Integer(), primary_key=True, index=True),
        sa.Column('peripheral_mapping_id', sa.Integer(), sa.ForeignKey('peripheral_mappings.id'), nullable=False),
        sa.Column('cron_expression', sa.String(length=100), nullable=False),
        sa.Column('duration_minutes', sa.Integer(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False, default=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')),
    )
    # Add new columns to schedules if not exists
    with op.batch_alter_table('schedules') as batch_op:
        for col, coltype in [
            ('peripheral_mapping_id', sa.Integer()),
            ('is_deleted', sa.Boolean()),
        ]:
            try:
                batch_op.add_column(sa.Column(col, coltype, nullable=False))
            except Exception:
                pass
        try:
            batch_op.alter_column('days_of_week', existing_type=sa.String(length=20), nullable=False)
        except Exception:
            pass
        # Drop FKs before dropping columns
        for fk in ['schedules_ibfk_2', 'schedules_ibfk_1']:
            try:
                batch_op.drop_constraint(fk, type_='foreignkey')
            except Exception:
                pass
        try:
            batch_op.create_foreign_key(None, 'peripheral_mappings', ['peripheral_mapping_id'], ['id'])
        except Exception:
            pass
        # Drop old columns if they exist
        for col in ['name', 'section_id', 'status', 'device_id', 'pattern', 'water_amount']:
            try:
                batch_op.drop_column(col)
            except Exception:
                pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('schedules', sa.Column('water_amount', mysql.FLOAT(), nullable=True))
    op.add_column('schedules', sa.Column('pattern', mysql.VARCHAR(length=50), nullable=True))
    op.add_column('schedules', sa.Column('device_id', mysql.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('schedules', sa.Column('status', mysql.VARCHAR(length=50), nullable=True))
    op.add_column('schedules', sa.Column('section_id', mysql.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('schedules', sa.Column('name', mysql.VARCHAR(length=255), nullable=False))
    op.drop_constraint(None, 'schedules', type_='foreignkey')
    op.create_foreign_key(op.f('schedules_ibfk_1'), 'schedules', 'devices', ['device_id'], ['id'])
    op.create_foreign_key(op.f('schedules_ibfk_2'), 'schedules', 'sections', ['section_id'], ['id'])
    op.alter_column('schedules', 'days_of_week',
               existing_type=mysql.VARCHAR(length=20),
               nullable=True)
    op.drop_column('schedules', 'is_deleted')
    op.drop_column('schedules', 'peripheral_mapping_id')
    op.drop_column('peripheral_types', 'exclusive_schedule')
    # ### end Alembic commands ###
